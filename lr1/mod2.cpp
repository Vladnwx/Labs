// Задача 2

#define PR(x) printf("x=%u, *x=%d, &x=%u\n", x, *x, &x)
#define PRF(x) printf("x=%u, *x=%f, &x=%u\n", x, *x, &x)
#include <stdio.h>
#include <windows.h>

int main(int argc, char *argv[])
{
    SetConsoleOutputCP(CP_UTF8);

    // Выделяем память и инициализируем вектор (массив) тремя элементами
    int mas[] = {100, 200, 300};

    // Выделяем память и инициализируем два указателя типа int
    int *ptr1, *ptr2;

    // присваиваем указателю ptr1 адрес начала массива mas, соответственно первому элементу массива
    ptr1 = mas;

    // присваиваем указателю ptr1 ссылку на второй элемкент массива mas[2], соответственно третьему элементу массива
    ptr2 = &mas[2];

    // выведем в консоль размер указателя int
    printf("Указатель int имеет размер %u \n", sizeof(int));

    // вывод в консоль массива mas, т.к. printf не знает как выводить массивы, то он выводит его адрес
    // при разименовании указателя он получает значение типа int, соответственно значение первого элемента
    // при доступе по ссылке получаем адрес первого элемента, он же равен указателю
    printf("Массив \t ");
    PR(mas);

    // вывод в консоль указателя ptr1, т.к. это указатель, то выводится адрес куда он указывает (в данный момент на начало массива mas)
    // при разименовании указателя он получает значение типа int, соответственно значение первого элемента mas[0]
    // при доступе по ссылке получаем адрес указателя где размещен указатель (т.е. указатель на данный указатель)
    printf("Указатель ptr1 ");
    PR(ptr1);

    ptr1++;
    printf("Указатель ptr1 увеличен на 1 \n");
    // вывод в консоль указателя ptr1, т.к. это указатель, то выводится адрес куда он указывает (в данный момент на второй элемент массива mas[1])
    // В связи с тем, что указатель типа int, он увеличил значение на 1*sizeof(int)
    // при разименовании указателя он получает значение типа int, но на 1 int больше, чем в предыдущий раз, соответственно значение второго элемента mas[1]
    // при доступе по ссылке получаем адрес указателя где размещен указатель (т.е. указатель на данный указатель, а он не изменился)
    printf("Указатель ptr1 ");
    PR(ptr1);

    // вывод в консоль указателя ptr2, т.к. это указатель, то выводится адрес куда он указывает (в данный момент на третий элемент массива mas[2])
    // Адрес указателя получен по ссылке на третий элемент массива mas[2]
    // при разименовании указателя он получает значение типа int, соответственно значение третьего элемента mas[3]
    // при доступе по ссылке получаем адрес указателя где размещен указатель (т.е. указатель на данный указатель)
    printf("Указатель ptr2 ");
    PR(ptr2);

    ++ptr2;
    printf("Указатель ptr2 увеличен на 1 \n");

    // вывод в консоль указателя ptr2, т.к. это указатель, то выводится адрес куда он указывает за границы массива
    // В связи с тем, что указатель типа int, он увеличил значение на 1*sizeof(int)
    // при разименовании указателя он получает значение типа int, но на 1 int больше, чем в предыдущий раз,
    // соответственно это какое-то мусорное значение, полученное из памяти
    // при доступе по ссылке получаем адрес указателя где размещен указатель (т.е. указатель на данный указатель, а он не изменился)
    printf("Указатель ptr2 ");
    PR(ptr2);

    // Разница между указателями вычисляется как (ptr2-ptr)/sizeof(int) именно поэтому она равна двум
    printf("ptr2-ptr1=%u\n", ptr2 - ptr1);

    // Для остальных без подробных комментариев
    // Float
    float masF[] = {100.0f, 200.0f, 300.0f};
    float *ptr1F, *ptr2F;
    ptr1F = masF;
    ptr2F = &masF[2];
    printf("Указатель float имеет размер %u \n", sizeof(float));
    printf("Массив \t ");
    PRF(masF);
    printf("Указатель ptr1F ");
    PRF(ptr1F);
    ptr1F++;
    printf("Указатель ptr1F увеличен на 1 \n");
    printf("Указатель ptr1F ");
    PRF(ptr1F);
    printf("Указатель ptr2F ");
    PRF(ptr2F);
    ++ptr2F;
    printf("Указатель ptr2F увеличен на 1 \n");
    printf("Указатель ptr2F ");
    PRF(ptr2F);
    printf("ptr2F-ptr1F=%u\n", ptr2F - ptr1F);

    // Double
    double masD[] = {100.0, 200.0, 300.0};
    double *ptr1D, *ptr2D;
    ptr1D = masD;
    ptr2D = &masD[2];
    printf("Указатель double имеет размер %u \n", sizeof(double));
    printf("Указатель long double имеет размер %u \n", sizeof(long double));
    printf("Массив \t ");
    PRF(masD);
    printf("Указатель ptr1D ");
    PRF(ptr1D);
    ptr1D++;
    printf("Указатель ptr1D увеличен на 1 \n");
    printf("Указатель ptr1D ");
    PRF(ptr1D);
    printf("Указатель ptr2D ");
    PRF(ptr2D);
    ++ptr2D;
    printf("Указатель ptr2D увеличен на 1 \n");
    printf("Указатель ptr2D ");
    PRF(ptr2D);
    printf("ptr2D-ptr1D=%u\n", ptr2D - ptr1D);

    // Short
    short masS[] = {100, 200, 300};
    short *ptr1S, *ptr2S;
    ptr1S = masS;
    ptr2S = &masS[2];
    printf("Указатель short имеет размер %u \n", sizeof(short));
    printf("Массив \t ");
    PR(masS);
    printf("Указатель ptr1S ");
    PR(ptr1S);
    ptr1S++;
    printf("Указатель ptr1S увеличен на 1 \n");
    printf("Указатель ptr1S ");
    PR(ptr1S);
    printf("Указатель ptr2S ");
    PR(ptr2S);
    ++ptr2S;
    printf("Указатель ptr2S увеличен на 1 \n");
    printf("Указатель ptr2S ");
    PR(ptr2S);
    printf("ptr2S-ptr1S=%u\n", ptr2S - ptr1S);

    // char
    char masC[] = {10, 30, 127};
    char *ptr1C, *ptr2C;
    ptr1C = masC;
    ptr2C = &masC[2];
    printf("Указатель char имеет размер %u \n", sizeof(char));
    printf("Массив \t ");
    PR(masC);
    printf("Указатель ptr1C ");
    PR(ptr1C);
    ptr1C++;
    printf("Указатель ptr1C увеличен на 1 \n");
    printf("Указатель ptr1C ");
    PR(ptr1C);
    printf("Указатель ptr2C ");
    PR(ptr2C);
    ++ptr2C;
    printf("Указатель ptr2C увеличен на 1 \n");
    printf("Указатель ptr2C ");
    PR(ptr2C);
    printf("ptr2C-ptr1C=%u\n", ptr2C - ptr1C);

    // long
    long masL[] = {10, 30, 127};
    long *ptr1L, *ptr2L;
    ptr1L = masL;
    ptr2L = &masL[2];
    printf("Указатель long имеет размер %u \n", sizeof(long));
    printf("Указатель long long имеет размер %u \n", sizeof(long long));
    printf("Массив \t ");
    PR(masL);
    printf("Указатель ptr1L ");
    PR(ptr1L);
    ptr1L++;
    printf("Указатель ptr1L увеличен на 1 \n");
    printf("Указатель ptr1L ");
    PR(ptr1L);
    printf("Указатель ptr2L ");
    PR(ptr2L);
    ++ptr2L;
    printf("Указатель ptr2L увеличен на 1 \n");
    printf("Указатель ptr2L ");
    PR(ptr2L);
    printf("ptr2L-ptr1L=%u\n", ptr2L - ptr1L);

    return 0;
}